/*Final Project
 ListView_Deals1.java
 Shashank G Hebbale(800773977)
 Sahana K Raj(800774871)
 */
package com.example.apg;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Color;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class ListView_Deals1 extends Activity {
	TextView showText;
	static ListView listview;
	public static Activity instance;
	static Context cont;
	List<ParseObject> pdel;
	List<ParseObject> ob ;
	static SharedPreferences sharedPreferences;
	static 	Editor editor;
	static ArrayList<Params> result;
	static ArrayList<Params> param;
	static ArrayList<Params> resultList;
	ArrayList<String> alWIsh;
	static Handler handler;
	String restoredUid="";
	GPStracker gps;
	 Params_Serial dbs;
	 ArrayList<Params_Serial> dbresult=new ArrayList<Params_Serial>();
	
    public static ArrayList<Params> getResult() {
		return result;
	}

	public static void setResult(ArrayList<Params> result) {
		ListView_Deals1.result = result;
	}

	@SuppressLint("NewApi")
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        // TODO Autogenerated method stub
        super.onCreate(savedInstanceState);
       // showText = new TextView(this);
        //showText.setText("See above Tab Customization");
        setContentView(R.layout.activity_list_view__deals1);

        String PREF_FILE_NAME = "filename";
		sharedPreferences = getSharedPreferences(
				PREF_FILE_NAME, 0);
		editor = sharedPreferences.edit();
		//editor.putString("REFRESH", "TEST1");
		//editor.apply();
        instance=this;
        cont = this;
        param = new ArrayList<Params>();
    	resultList = new ArrayList<Params>();
    	listview = (ListView)findViewById(R.id.listView1);
        //DownloadImage download = new DownloadImage(this);
        //new AsynctaskList(this, listview).execute("http://api.groupon.com/v2/deals.json?client_id=dbaa2d7f2b3d92ec6b509f74f48243b58689af11&division_id=san-francisco");
        gps = new GPStracker(this,instance);
        
        // check if GPS enabled     
        if(gps.canGetLocation()){
             
            double latitude = gps.getLatitude();
            double longitude = gps.getLongitude();
 	    
            if(sharedPreferences.getString("SPINNER", "").equals("YES"))
	 	    {
	 	    	String id = sharedPreferences.getString("ID", "");
				new AsynctaskList(this, listview,latitude,longitude,0,1).execute("http://api.groupon.com/v2/deals.json?client_id=dbaa2d7f2b3d92ec6b509f74f48243b58689af11&division_id="+id);

	 	    }
	 	    else{
	 	 	   new Asynctask_location(this,listview,latitude,longitude,0).execute("http://maps.google.com/maps/api/geocode/json?latlng="+latitude+","+longitude+"&sensor=true");
	
	 	    }
         //   new Asynctask_location(this,listview1,latitude,longitude,0).execute("http://maps.google.com/maps/api/geocode/json?latlng="+latitude+","+longitude+"&sensor=true");
        }else{
            // can't get location
            // GPS or Network is not enabled
            // Ask user to enable GPS/network in settings
            gps.showSettingsAlert();
           
        }
  //  new AsynctaskList(this, listview1,this).execute("http://api.groupon.com/v2/deals.json?client_id=dbaa2d7f2b3d92ec6b509f74f48243b58689af11&division_id=san-francisco");

    handler = new Handler(new Handler.Callback() {

		@Override
		public boolean handleMessage(Message msg) {
			// TODO Auto-generated method stub
			final ArrayList<Params> res = msg.getData().getParcelableArrayList("DATA");
			 MovieAdapter adapter = new MovieAdapter(ListView_Deals1.this, R.layout.activity_list_view__deals1, res);
					  listview.setAdapter(adapter); adapter.notifyDataSetChanged();
					  listview.setBackgroundColor(Color.TRANSPARENT);
					  listview.setOnItemClickListener(new OnItemClickListener() {

							@Override
							public void onItemClick(AdapterView<?> arg0, View arg1,
									int arg2, long arg3) {
								// TODO Auto-generated method stub
								Intent intent = new Intent(ListView_Deals1.this, WebActivity.class);
								 intent.putExtra("WEB", res.get(arg2).getDealurl());
								 ListView_Deals1.this.startActivity(intent);
							}
						});
						  
						  listview.setOnItemLongClickListener(new OnItemLongClickListener() {

							@SuppressWarnings("unchecked")
							@Override
							public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
									int arg2, long arg3) {
								// TODO Auto-generated method stub
								int id = res.get(arg2).getId();
								String uid =String.valueOf(id);
								restoredUid = sharedPreferences.getString("USERID", null);
								//Toast.makeText(currentContext, uid, Toast.LENGTH_LONG).show();
								 ParseQuery<ParseObject> query = new ParseQuery<ParseObject>(
										 restoredUid.toUpperCase().trim());
						            query.whereEqualTo("WISHLIST", uid);
						        	
						        	
			                        try {
										ob =query.find();
										alWIsh=new  ArrayList<String>();
										//user=new UserDetails();
						                for (ParseObject userOne : ob) {
						                	
						                	

						                	//user.setPwd((String) userOne.get("Password"));
						                	alWIsh.add(userOne.toString());
						                    //lob.add((String) userOne.get("Password"));
						                	//alUser.add(user);
						               }
									} catch (ParseException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
			                        if(alWIsh ==null || alWIsh.isEmpty())
			                        {
			                        	
			                        	try {
			                                dbresult = (ArrayList<Params_Serial>) ObjectSerializer.deserialize(sharedPreferences.getString("WISH", ObjectSerializer.serialize(new ArrayList<Params_Serial>())));
			                            } catch (IOException e) {
			                                e.printStackTrace();
			                            }
			                        	dbs = new Params_Serial(res.get(arg2).getImageurl(), res.get(arg2).getTitle(), res.get(arg2).getEndtime(), res.get(arg2).dealurl, res.get(arg2).original_price, res.get(arg2).discount_price, res.get(arg2).remaining_quan, id, res.get(arg2).dis_percent);	
			                        	//dbresult =new ArrayList<Params_Serial>();
			                        	dbresult.add(dbs);
			                        	Log.d("size", dbresult.toString());
			                        	try {
			                    			editor.putString("WISH", ObjectSerializer.serialize(dbresult));
			                    		} catch (IOException e) {
			                    			e.printStackTrace();
			                    		}
			                    		editor.commit();
			                        	
			        					Toast.makeText(ListView_Deals1.this, "Deal"+  " added to wish list", Toast.LENGTH_LONG).show();
			        					String tblName=restoredUid.toUpperCase().trim();
			        			       	String grouponId=uid.trim();
			        			       	ParseObject userOne = new ParseObject(tblName);
			        					
			        					
			        					userOne.put("WISHLIST", grouponId);
			        					//Log.d("GROUPON",grouponId);
			        					//userOne.put("UserID", etUid.getText().toString().toUpperCase().trim());
			        					//userOne.put("Password", etPwd.getText().toString().trim());
			        					//Log.d("dbresult",dbresult.toString());
			        					userOne.saveInBackground();
			                        }
			                        else
			                        {
			                        	try {
			                                dbresult = (ArrayList<Params_Serial>) ObjectSerializer.deserialize(sharedPreferences.getString("WISH", ObjectSerializer.serialize(new ArrayList<Params_Serial>())));
			                            } catch (IOException e) {
			                                e.printStackTrace();
			                            }
			        					Toast.makeText(ListView_Deals1.this, "Deal deleted from wishlist", Toast.LENGTH_LONG).show();
			        					String tblName=restoredUid.toUpperCase().trim();
			        			       	String grouponId=uid.trim();
			        			       	ParseQuery<ParseObject> queryDel = new ParseQuery<ParseObject>(
			        			                tblName);
			        			        queryDel.whereEqualTo("WISHLIST",grouponId);
			        			        
			        			        try {
			        			            pdel = query.find();
			        			            
			        			            }catch(Exception c){
			        			            	c.printStackTrace();
			        			            }
			        			        try {
			        						ParseObject.deleteAll(pdel);
			        					} catch (com.parse.ParseException e) {
			        						// TODO Auto-generated catch block
			        						e.printStackTrace();
			        					}
			        					//userOne.saveInBackground();
			        					 
			        			       	//ParseObject userOne = new ParseObject(tblName);
			                            // ParseObject userOne1 = new ParseObject(tblName);
			        					
			                            // userOne1.remove(grouponId);
			        					//userOne1.deleteInBackground();
			        					//Log.d("dbresult",dbresult.toString());
			        					//userOne.put("WISHLIST", grouponId);
			        					
			        					
			        					for(int j = 0; j < dbresult.size(); j++)
			        					{
			        					    Params_Serial obj = dbresult.get(j);

			        					    if(obj.getId()==id){
			        					       //found, delete.
			        					        dbresult.remove(j);
			        					        break;
			        					    }

			        					}
			        					try {
			                    			editor.putString("WISH", ObjectSerializer.serialize(dbresult));
			                    		} catch (IOException e) {
			                    			e.printStackTrace();
			                    		}
			                    		editor.commit();
			                        }
								return false;
							}
						});
			return false;
			
		}
	});	
    
    }

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.list_view__deals, menu);
		return true;
	}

	
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
      //  Log.d("GPS", "test1");
	//	 if (resultCode == 1) {
             gps = new GPStracker(this,instance);
			 double latitude = gps.getLatitude();
	         double longitude = gps.getLongitude();
	         Log.d("GPS", String.valueOf(latitude));
		 	 new Asynctask_location(this,listview,latitude,longitude,0).execute("http://maps.google.com/maps/api/geocode/json?latlng="+latitude+","+longitude+"&sensor=true");

		// }
	}
	
}
